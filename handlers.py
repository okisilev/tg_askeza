import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from database import Database
from yookassa_client import YooKassaClient
from channel_manager import ChannelManager
from config import PRIVATE_CHANNEL_ID, PRIVATE_CHAT_ID

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self):
        self.db = Database()
        self.yookassa = YooKassaClient()
        self.channel_manager = ChannelManager()
    
    def get_channel_url(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
        if not PRIVATE_CHANNEL_ID:
            return None
        
        if PRIVATE_CHANNEL_ID.startswith('@'):
            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å @username
            return f"https://t.me/{PRIVATE_CHANNEL_ID.replace('@', '')}"
        else:
            # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö ID –∫–∞–Ω–∞–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1002806695160)
            # –£–±–∏—Ä–∞–µ–º -100 –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å
            channel_id = PRIVATE_CHANNEL_ID[4:] if PRIVATE_CHANNEL_ID.startswith('-100') else PRIVATE_CHANNEL_ID
            return f"https://t.me/c/{channel_id}"
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = """
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ê—Å–∫–µ–∑—ã! üåü

–ê—Å–∫–µ–∑–∞ ‚Äî —ç—Ç–æ –¥—Ä–µ–≤–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç:
‚Ä¢ –†–∞–∑–≤–∏—Ç—å —Å–∏–ª—É –≤–æ–ª–∏ –∏ —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞–∑—É–º –æ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π
‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ —Ñ–æ–∫—É—Å
‚Ä¢ –î–æ—Å—Ç–∏—á—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ –±–∞–ª–∞–Ω—Å–∞

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
        """
        
        keyboard = [
            [KeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å/–û—Ç–≤–µ—Ç"), KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user_id = update.effective_user.id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if text == "‚ùì –í–æ–ø—Ä–æ—Å/–û—Ç–≤–µ—Ç":
            await self.show_faq_text(update)
        elif text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø":
            await self.show_payment_options_text(update)
        elif text == "üîô –ù–∞–∑–∞–¥":
            await self.show_main_menu_text(update)
        elif text == "üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª":
            await self.give_channel_access_text(update)
        elif text == "üí¨ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç":
            await self.give_chat_access_text(update)
        elif text == "üî∏ –ê—Å–∫–µ–∑–∞ - 990‚ÇΩ":
            await self.create_payment_text(update, "askeza")
        elif text == "üî∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è - 2490‚ÇΩ":
            await self.create_payment_text(update, "numerology")
        elif text == "üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏":
            await self.show_payment_history_text(update)
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        logger.info("=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ö–ù–û–ü–ö–ò ===")
        try:
            query = update.callback_query
            logger.info(f"Query –ø–æ–ª—É—á–µ–Ω: {query}")
            await query.answer()
            
            data = query.data
            user_id = query.from_user.id
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if data == "faq":
                logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ FAQ")
                await self.show_faq(query)
            elif data == "payment":
                logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ")
                await self.show_payment_options(query)
            elif data == "back_to_main":
                await self.show_main_menu(query)
            elif data.startswith("pay_"):
                payment_type = data.split("_")[1]
                logger.info(f"–°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Ç–∏–ø–∞: {payment_type}")
                logger.info(f"Callback data: {data}")
                await self.create_payment(query, payment_type)
            elif data == "check_access":
                await self.show_access_status(query)
            elif data == "check_payments":
                await self.show_payment_history(query)
            elif data == "private_channel":
                await self.give_channel_access(query)
            elif data == "private_chat":
                await self.give_chat_access(query)
            elif data == "check_subscription":
                await self.check_subscription(query)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ button_callback: {e}")
            if update.callback_query:
                await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def show_faq(self, query):
        """–ü–æ–∫–∞–∑ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        faq_text = """
‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

üî∏ –ß—Ç–æ —Ç–∞–∫–æ–µ –ê—Å–∫–µ–∑–∞?
–ê—Å–∫–µ–∑–∞ ‚Äî —ç—Ç–æ –¥—É—Ö–æ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–∏–ª—ã –≤–æ–ª–∏ —á–µ—Ä–µ–∑ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.

üî∏ –°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –∫—É—Ä—Å?
–î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ê—Å–∫–µ–∑—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã.

üî∏ –ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä?
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è, –∏–º–µ–Ω–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é.

üî∏ –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?
–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ÆKassa. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã.

üî∏ –ö–æ–≥–¥–∞ —è –ø–æ–ª—É—á—É –¥–æ—Å—Ç—É–ø?
–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.

üî∏ –ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø?
–î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(faq_text, reply_markup=reply_markup)
    
    async def show_faq_text(self, update):
        """–ü–æ–∫–∞–∑ FAQ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        faq_text = """
‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

üî∏ –ß—Ç–æ —Ç–∞–∫–æ–µ –ê—Å–∫–µ–∑–∞?
–ê—Å–∫–µ–∑–∞ ‚Äî —ç—Ç–æ –¥—É—Ö–æ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–∏–ª—ã –≤–æ–ª–∏ —á–µ—Ä–µ–∑ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.

üî∏ –°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –∫—É—Ä—Å?
–î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ê—Å–∫–µ–∑—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã.

üî∏ –ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä?
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è, –∏–º–µ–Ω–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é.

üî∏ –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?
–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ÆKassa. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã.

üî∏ –ö–æ–≥–¥–∞ —è –ø–æ–ª—É—á—É –¥–æ—Å—Ç—É–ø?
–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.

üî∏ –ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø?
–î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
        """
        
        keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(faq_text, reply_markup=reply_markup)
    
    async def show_payment_options_text(self, update):
        """–ü–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        payment_text = """
üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞:

üî∏ –ê—Å–∫–µ–∑–∞ - 990‚ÇΩ
–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –ø–æ –ê—Å–∫–µ–∑–µ –Ω–∞ 30 –¥–Ω–µ–π

üî∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è - 2490‚ÇΩ
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞
        """
        
        keyboard = [
            [KeyboardButton("üî∏ –ê—Å–∫–µ–∑–∞ - 990‚ÇΩ"), KeyboardButton("üî∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è - 2490‚ÇΩ")],
            [KeyboardButton("üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(payment_text, reply_markup=reply_markup)
    
    async def show_main_menu_text(self, update):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        user_access = self.db.get_user_access(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø
        has_access = len(user_access) > 0
        
        if has_access:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            keyboard = [
                [KeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å/–û—Ç–≤–µ—Ç")],
                [KeyboardButton("üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª"), KeyboardButton("üí¨ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç")],
                [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø")]
            ]
        else:
            # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [KeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å/–û—Ç–≤–µ—Ç"), KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø")]
            ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        main_text = """
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ê—Å–∫–µ–∑—ã! üåü
–ê—Å–∫–µ–∑–∞ ‚Äî —ç—Ç–æ –¥—Ä–µ–≤–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç:
‚Ä¢ –†–∞–∑–≤–∏—Ç—å —Å–∏–ª—É –≤–æ–ª–∏ –∏ —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞–∑—É–º –æ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π
‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ —Ñ–æ–∫—É—Å
‚Ä¢ –î–æ—Å—Ç–∏—á—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ –±–∞–ª–∞–Ω—Å–∞
–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
        """
        
        await update.message.reply_text(main_text, reply_markup=reply_markup)
    
    async def show_payment_options(self, query):
        """–ü–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã"""
        try:
            logger.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã")
            payment_text = """
üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞:

üî∏ –ê—Å–∫–µ–∑–∞ - 990‚ÇΩ
–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –ø–æ –ê—Å–∫–µ–∑–µ –Ω–∞ 30 –¥–Ω–µ–π

üî∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è - 2490‚ÇΩ
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞
        """
            
            keyboard = [
                [InlineKeyboardButton("üî∏ –ê—Å–∫–µ–∑–∞ - 990‚ÇΩ", callback_data="pay_askeza")],
                [InlineKeyboardButton("üî∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è - 2490‚ÇΩ", callback_data="pay_numerology")],
                [InlineKeyboardButton("üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏", callback_data="check_payments")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(payment_text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_payment_options: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã.")
    
    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        user_id = query.from_user.id
        user_access = self.db.get_user_access(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø
        has_access = len(user_access) > 0
        
        if has_access:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            keyboard = [
                [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å/–û—Ç–≤–µ—Ç", callback_data="faq")],
                [InlineKeyboardButton("üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª", callback_data="private_channel")],
                [InlineKeyboardButton("üí¨ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç", callback_data="private_chat")],
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment")]
            ]
        else:
            # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å/–û—Ç–≤–µ—Ç", callback_data="faq")],
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        main_text = """
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ê—Å–∫–µ–∑—ã! üåü

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
        """
        
        await query.edit_message_text(main_text, reply_markup=reply_markup)
    
    async def create_payment(self, query, payment_type: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
        user_id = query.from_user.id
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: —Ç–∏–ø={payment_type}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={user_id}")
        
        try:
            amount = self.yookassa.get_payment_amount(payment_type)
            description = self.yookassa.get_payment_description(payment_type)
            
            logger.info(f"–°—É–º–º–∞: {amount}, –æ–ø–∏—Å–∞–Ω–∏–µ: {description}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
            payment_result = self.yookassa.create_payment(
                amount=amount,
                description=description,
                return_url=f"https://t.me/your_bot"
            )
            
            if payment_result["success"]:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                self.db.create_payment(
                    user_id=user_id,
                    payment_type=payment_type,
                    amount=amount,
                    yookassa_payment_id=payment_result["payment_id"]
                )
                
                payment_text = f"""
üí≥ –û–ø–ª–∞—Ç–∞ {description}

üí∞ –°—É–º–º–∞: {amount}‚ÇΩ
üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_result["payment_id"]}

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:
                """
                
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_result["confirmation_url"])],
                    [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_access")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="payment")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(payment_text, reply_markup=reply_markup)
            else:
                error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="payment")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(error_text, reply_markup=reply_markup)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="payment")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(error_text, reply_markup=reply_markup)
    
    async def show_access_status(self, query):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç—É–ø–∞"""
        user_id = query.from_user.id
        user_access = self.db.get_user_access(user_id)
        
        if user_access:
            access_text = "‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø:\n\n"
            for access in user_access:
                access_type = "–ê—Å–∫–µ–∑–∞" if access["access_type"] == "askeza" else "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä"
                expires_at = access["expires_at"]
                access_text += f"üî∏ {access_type} - –¥–æ {expires_at}\n"
            
            keyboard = [
                [InlineKeyboardButton("üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª", callback_data="private_channel")],
                [InlineKeyboardButton("üí¨ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç", callback_data="private_chat")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        else:
            access_text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º."
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(access_text, reply_markup=reply_markup)
    
    async def show_payment_history(self, query):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞"""
        user_id = query.from_user.id
        
        try:
            logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            import sqlite3
            with sqlite3.connect(self.db.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT yookassa_payment_id, payment_type, amount, status, created_at, paid_at
                    FROM payments 
                    WHERE user_id = ?
                    ORDER BY created_at DESC
                    LIMIT 10
                ''', (user_id,))
                payments = cursor.fetchall()
            
            if not payments:
                history_text = """
üìã –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π.
                """
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
            else:
                history_text = "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
                updated_payments = []
                
                for payment in payments:
                    payment_id = payment['yookassa_payment_id']
                    payment_type = payment['payment_type']
                    amount = payment['amount']
                    status = payment['status']
                    created_at = payment['created_at']
                    paid_at = payment['paid_at']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ÆKassa –¥–ª—è pending –ø–ª–∞—Ç–µ–∂–µ–π
                    if status == 'pending':
                        try:
                            status_result = self.yookassa.get_payment_status(payment_id)
                            if status_result["success"]:
                                new_status = status_result["status"]
                                if new_status != status:
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                                    self.db.update_payment_status(payment_id, new_status)
                                    status = new_status
                                    logger.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {status}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
                    type_name = "–ê—Å–∫–µ–∑–∞" if payment_type == "askeza" else "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä"
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                    status_emoji = {
                        'pending': '‚è≥',
                        'succeeded': '‚úÖ',
                        'canceled': '‚ùå'
                    }.get(status, '‚ùì')
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    from datetime import datetime
                    try:
                        created_date = datetime.fromisoformat(created_at.replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
                    except:
                        created_date = created_at
                    
                    history_text += f"{status_emoji} {type_name} - {amount}‚ÇΩ\n"
                    history_text += f"   ID: {payment_id[:8]}...\n"
                    history_text += f"   –î–∞—Ç–∞: {created_date}\n"
                    if paid_at:
                        try:
                            paid_date = datetime.fromisoformat(paid_at.replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
                            history_text += f"   –û–ø–ª–∞—á–µ–Ω: {paid_date}\n"
                        except:
                            pass
                    history_text += "\n"
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã", callback_data="check_payments")],
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(history_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π."
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="payment")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(error_text, reply_markup=reply_markup)
    
    async def give_channel_access(self, query):
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É"""
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø
        user_access = self.db.get_user_access(user_id)
        if not user_access:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
            return
        
        if not PRIVATE_CHANNEL_ID:
            await query.edit_message_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–∞–Ω–∞–ª–µ
        in_channel = await self.channel_manager.check_user_in_channel(user_id)
        
        if in_channel:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–∞–Ω–∞–ª–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
            channel_text = """
üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –ê—Å–∫–µ–∑—ã

‚úÖ –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –Ω–∞—à–µ–º –∑–∞–∫—Ä—ã—Ç–æ–º –∫–∞–Ω–∞–ª–µ!
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª.
            """
            channel_url = self.get_channel_url()
            keyboard = [
                [InlineKeyboardButton("üì∫ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_url)],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            success = await self.channel_manager.add_user_to_channel(user_id)
            if success:
                channel_text = """
üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –ê—Å–∫–µ–∑—ã

‚úÖ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª!
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª.
                """
                channel_url = self.get_channel_url()
                keyboard = [
                    [InlineKeyboardButton("üì∫ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_url)],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
            else:
                channel_text = """
üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –ê—Å–∫–µ–∑—ã

‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
‚Ä¢ –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.
                """
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(channel_text, reply_markup=reply_markup)
    
    async def check_subscription(self, query):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø
        user_access = self.db.get_user_access(user_id)
        if not user_access:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
            return
        
        if not PRIVATE_CHANNEL_ID:
            await query.edit_message_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        in_channel = await self.channel_manager.check_user_in_channel(user_id)
        
        if in_channel:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω - –¥–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            channel_text = """
üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –ê—Å–∫–µ–∑—ã

‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!
–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª.
            """
            channel_url = self.get_channel_url()
            keyboard = [
                [InlineKeyboardButton("üì∫ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_url)],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            channel_text = """
üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –ê—Å–∫–µ–∑—ã

‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–º —Ä–∞–Ω–µ–µ, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
            """
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscription")],
                [InlineKeyboardButton("üì∫ –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="private_channel")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(channel_text, reply_markup=reply_markup)
    
    async def give_chat_access(self, query):
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É"""
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø
        user_access = self.db.get_user_access(user_id)
        if not user_access:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
            return
        
        if not PRIVATE_CHAT_ID:
            await query.edit_message_text("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ
        in_chat = await self.channel_manager.check_user_in_chat(user_id)
        
        if in_chat:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
            chat_text = """
üí¨ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –ê—Å–∫–µ–∑—ã

–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –Ω–∞—à–µ–º –∑–∞–∫—Ä—ã—Ç–æ–º —á–∞—Ç–µ!
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç.
            """
            keyboard = [
                [InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", url=f"https://t.me/{PRIVATE_CHAT_ID.replace('@', '')}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
            success = await self.channel_manager.add_user_to_chat(user_id)
            if success:
                chat_text = """
üí¨ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –ê—Å–∫–µ–∑—ã

–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç!
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç.
                """
                keyboard = [
                    [InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", url=f"https://t.me/{PRIVATE_CHAT_ID.replace('@', '')}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
            else:
                chat_text = """
üí¨ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –ê—Å–∫–µ–∑—ã

‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
‚Ä¢ –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ß–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.
                """
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(chat_text, reply_markup=reply_markup)
    
    async def process_payment_webhook(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç –ÆKassa"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook
            webhook_data = update.message.text if update.message else str(update)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ YooKassa –∫–ª–∏–µ–Ω—Ç
            result = self.yookassa.process_webhook(webhook_data)
            
            if result["success"] and result.get("status") == "succeeded":
                payment_id = result["payment_id"]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                self.db.update_payment_status(payment_id, "succeeded")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                payment_info = self.db.get_payment(payment_id)
                if payment_info:
                    user_id = payment_info["user_id"]
                    payment_type = payment_info["payment_type"]
                    
                    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
                    self.db.grant_access(user_id, payment_type)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    success_text = f"""
‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ {payment_type}.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                    """
                    
                    keyboard = [
                        [InlineKeyboardButton("üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª", callback_data="private_channel")],
                        [InlineKeyboardButton("üí¨ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç", callback_data="private_chat")],
                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=success_text,
                        reply_markup=reply_markup
                    )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
    
    async def give_channel_access_text(self, update):
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø
        user_access = self.db.get_user_access(user_id)
        if not user_access:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
            return
        
        if not PRIVATE_CHANNEL_ID:
            await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–∞–Ω–∞–ª–µ
        in_channel = await self.channel_manager.check_user_in_channel(user_id)
        
        if in_channel:
            channel_url = self.get_channel_url()
            channel_text = f"""
üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –ê—Å–∫–µ–∑—ã

–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –Ω–∞—à–µ–º –∑–∞–∫—Ä—ã—Ç–æ–º –∫–∞–Ω–∞–ª–µ!
–ü–µ—Ä–µ–π—Ç–∏: {channel_url}
            """
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª
            success = await self.channel_manager.add_user_to_channel(user_id)
            if success:
                channel_url = self.get_channel_url()
                channel_text = f"""
üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –ê—Å–∫–µ–∑—ã

–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª!
–ü–µ—Ä–µ–π—Ç–∏: {channel_url}
                """
            else:
                channel_text = """
üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –ê—Å–∫–µ–∑—ã

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                """
        
        await update.message.reply_text(channel_text)
    
    async def give_chat_access_text(self, update):
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø
        user_access = self.db.get_user_access(user_id)
        if not user_access:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
            return
        
        if not PRIVATE_CHAT_ID:
            await update.message.reply_text("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ
        in_chat = await self.channel_manager.check_user_in_chat(user_id)
        
        if in_chat:
            chat_text = f"""
üí¨ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –ê—Å–∫–µ–∑—ã

–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –Ω–∞—à–µ–º –∑–∞–∫—Ä—ã—Ç–æ–º —á–∞—Ç–µ!
–ü–µ—Ä–µ–π—Ç–∏: https://t.me/{PRIVATE_CHAT_ID.replace('@', '')}
            """
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
            success = await self.channel_manager.add_user_to_chat(user_id)
            if success:
                chat_text = f"""
üí¨ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –ê—Å–∫–µ–∑—ã

–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç!
–ü–µ—Ä–µ–π—Ç–∏: https://t.me/{PRIVATE_CHAT_ID.replace('@', '')}
                """
            else:
                chat_text = """
üí¨ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –ê—Å–∫–µ–∑—ã

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                """
        
        await update.message.reply_text(chat_text)
    
    async def create_payment_text(self, update, payment_type: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        try:
            amount = self.yookassa.get_payment_amount(payment_type)
            description = self.yookassa.get_payment_description(payment_type)
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
            payment_result = self.yookassa.create_payment(
                amount=amount,
                description=description,
                return_url=f"https://t.me/your_bot"
            )
            
            if payment_result["success"]:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                self.db.create_payment(
                    user_id=user_id,
                    payment_type=payment_type,
                    amount=amount,
                    yookassa_payment_id=payment_result["payment_id"]
                )
                
                payment_text = f"""
üí≥ –û–ø–ª–∞—Ç–∞ {description}

üí∞ –°—É–º–º–∞: {amount}‚ÇΩ
üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_result["payment_id"]}

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:
{payment_result["confirmation_url"]}
                """
                
                await update.message.reply_text(payment_text)
            else:
                error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                await update.message.reply_text(error_text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await update.message.reply_text(error_text)
    
    async def show_payment_history_text(self, update):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        try:
            logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            import sqlite3
            with sqlite3.connect(self.db.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT yookassa_payment_id, payment_type, amount, status, created_at, paid_at
                    FROM payments 
                    WHERE user_id = ?
                    ORDER BY created_at DESC
                    LIMIT 10
                ''', (user_id,))
                payments = cursor.fetchall()
            
            if not payments:
                history_text = """
üìã –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π.
                """
            else:
                history_text = "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
                
                for payment in payments:
                    payment_id = payment['yookassa_payment_id']
                    payment_type = payment['payment_type']
                    amount = payment['amount']
                    status = payment['status']
                    created_at = payment['created_at']
                    paid_at = payment['paid_at']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ÆKassa –¥–ª—è pending –ø–ª–∞—Ç–µ–∂–µ–π
                    if status == 'pending':
                        try:
                            status_result = self.yookassa.get_payment_status(payment_id)
                            if status_result["success"]:
                                new_status = status_result["status"]
                                if new_status != status:
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                                    self.db.update_payment_status(payment_id, new_status)
                                    status = new_status
                                    logger.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {status}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
                    type_name = "–ê—Å–∫–µ–∑–∞" if payment_type == "askeza" else "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä"
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                    status_emoji = {
                        'pending': '‚è≥',
                        'succeeded': '‚úÖ',
                        'canceled': '‚ùå'
                    }.get(status, '‚ùì')
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    from datetime import datetime
                    try:
                        created_date = datetime.fromisoformat(created_at.replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
                    except:
                        created_date = created_at
                    
                    history_text += f"{status_emoji} {type_name} - {amount}‚ÇΩ\n"
                    history_text += f"   ID: {payment_id[:8]}...\n"
                    history_text += f"   –î–∞—Ç–∞: {created_date}\n"
                    if paid_at:
                        try:
                            paid_date = datetime.fromisoformat(paid_at.replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
                            history_text += f"   –û–ø–ª–∞—á–µ–Ω: {paid_date}\n"
                        except:
                            pass
                    history_text += "\n"
            
            await update.message.reply_text(history_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π."
            await update.message.reply_text(error_text)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
