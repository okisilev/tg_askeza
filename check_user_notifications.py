#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import sqlite3
import asyncio
from datetime import datetime, timedelta
from config import DATABASE_PATH, BOT_TOKEN
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup

def check_user_payments(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            SELECT yookassa_payment_id, payment_type, amount, status, created_at, paid_at
            FROM payments 
            WHERE user_id = ?
            ORDER BY created_at DESC
        ''', (user_id,))
        user_payments = cursor.fetchall()
        
        if user_payments:
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(user_payments)} –ø–ª–∞—Ç–µ–∂–µ–π:")
            for payment in user_payments:
                print(f"   ‚Ä¢ Payment ID: {payment[0]}")
                print(f"     Type: {payment[1]}")
                print(f"     Amount: {payment[2]}‚ÇΩ")
                print(f"     Status: {payment[3]}")
                print(f"     Created: {payment[4]}")
                print(f"     Paid: {payment[5] or '–ù–µ –æ–ø–ª–∞—á–µ–Ω'}")
                print()
        else:
            print("‚ùå –ü–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            SELECT access_type, expires_at, is_active, created_at
            FROM user_access 
            WHERE user_id = ?
            ORDER BY created_at DESC
        ''', (user_id,))
        user_access = cursor.fetchall()
        
        if user_access:
            print(f"üîê –ù–∞–π–¥–µ–Ω–æ {len(user_access)} –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–∞:")
            for access in user_access:
                print(f"   ‚Ä¢ Type: {access[0]}")
                print(f"     Expires: {access[1]}")
                print(f"     Active: {access[2]}")
                print(f"     Created: {access[3]}")
                print()
        else:
            print("‚ùå –î–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        conn.close()
        return len(user_payments), len(user_access)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 0, 0

async def send_notification_to_user(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    print(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    try:
        bot = Bot(token=BOT_TOKEN)
        
        success_text = f"""
‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –ê—Å–∫–µ–∑–µ.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
        keyboard = [
            [InlineKeyboardButton("üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª", callback_data="private_channel")],
            [InlineKeyboardButton("üí¨ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç", callback_data="private_chat")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await bot.send_message(
            chat_id=user_id,
            text=success_text,
            reply_markup=reply_markup
        )
        
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

async def grant_access_to_user(user_id: int, payment_type: str):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    print(f"üîê –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø
        cursor.execute('''
            SELECT id, access_type, is_active 
            FROM user_access 
            WHERE user_id = ? AND is_active = 1
        ''', (user_id,))
        existing_access = cursor.fetchone()
        
        if existing_access:
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_access[1]}")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ—Å—Ç—É–ø
            expires_at = datetime.now() + timedelta(days=30)
            cursor.execute('''
                INSERT INTO user_access (user_id, access_type, expires_at, is_active)
                VALUES (?, ?, ?, ?)
            ''', (user_id, payment_type, expires_at, 1))
            
            print(f"‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ {expires_at}")
        
        conn.commit()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 760111270
    user_id = 760111270
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    payments_count, access_count = check_user_payments(user_id)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print(f"   ‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {payments_count}")
    print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–∞: {access_count}")
    
    if payments_count > 0 and access_count > 0:
        print("\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ –∏ –¥–æ—Å—Ç—É–ø")
        print("–ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ç–æ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification_sent = await send_notification_to_user(user_id)
        
        if notification_sent:
            print("\nüéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –ª–æ–≥–∏")
    else:
        print("\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python run_no_webhook.py")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")

if __name__ == "__main__":
    asyncio.run(main())
