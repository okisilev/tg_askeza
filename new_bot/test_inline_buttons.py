#!/usr/bin/env python3
"""
–¢–µ—Å—Ç inline –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    print(f"üîç [START] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"[START] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø (299 —Ä—É–±.)", callback_data="pay")],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
        [InlineKeyboardButton("üß™ –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏", callback_data="test_button")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or '–¥—Ä—É–≥'}! üå∏

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ inline –∫–Ω–æ–ø–æ–∫.

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup
    )
    
    print(f"‚úÖ [START] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    logger.info(f"[START] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

async def handle_pay_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    print(f"üîç [PAY] –ü–æ–ª—É—á–µ–Ω callback_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üîç [PAY] Callback data: {query.data}")
    logger.info(f"[PAY] –ü–æ–ª—É—á–µ–Ω callback_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"[PAY] Callback data: {query.data}")
    
    await query.edit_message_text(
        "‚úÖ –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
        "–ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –ÆKassa API.\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
    )
    
    print(f"‚úÖ [PAY] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"[PAY] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def handle_check_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    print(f"üîç [CHECK] –ü–æ–ª—É—á–µ–Ω callback_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üîç [CHECK] Callback data: {query.data}")
    logger.info(f"[CHECK] –ü–æ–ª—É—á–µ–Ω callback_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"[CHECK] Callback data: {query.data}")
    
    await query.edit_message_text(
        "‚úÖ –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –ÆKassa API."
    )
    
    print(f"‚úÖ [CHECK] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"[CHECK] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def handle_test_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    print(f"üîç [TEST] –ü–æ–ª—É—á–µ–Ω callback_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üîç [TEST] Callback data: {query.data}")
    logger.info(f"[TEST] –ü–æ–ª—É—á–µ–Ω callback_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"[TEST] Callback data: {query.data}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        [InlineKeyboardButton("üß™ –ï—â–µ —Ç–µ—Å—Ç", callback_data="test_button")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
        "–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n"
        "Inline –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.",
        reply_markup=reply_markup
    )
    
    print(f"‚úÖ [TEST] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"[TEST] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def handle_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    print(f"üîç [STATUS] –ü–æ–ª—É—á–µ–Ω callback_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üîç [STATUS] Callback data: {query.data}")
    logger.info(f"[STATUS] –ü–æ–ª—É—á–µ–Ω callback_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"[STATUS] Callback data: {query.data}")
    
    await query.edit_message_text(
        "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
        "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        "‚úÖ Inline –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç\n"
        "‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n"
        "‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ"
    )
    
    print(f"‚úÖ [STATUS] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"[STATUS] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def handle_back_to_main_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    print(f"üîç [BACK] –ü–æ–ª—É—á–µ–Ω callback_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üîç [BACK] Callback data: {query.data}")
    logger.info(f"[BACK] –ü–æ–ª—É—á–µ–Ω callback_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"[BACK] Callback data: {query.data}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø (299 —Ä—É–±.)", callback_data="pay")],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
        [InlineKeyboardButton("üß™ –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏", callback_data="test_button")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    
    print(f"‚úÖ [BACK] –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"[BACK] –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error: {context.error}")
    print(f"‚ùå –û—à–∏–±–∫–∞: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫...")
    print(f"ü§ñ –¢–æ–∫–µ–Ω: {config.BOT_TOKEN[:10]}...")
    
    application = Application.builder().token(config.BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_pay_callback, pattern="pay"))
    application.add_handler(CallbackQueryHandler(handle_check_payment_callback, pattern="check_payment"))
    application.add_handler(CallbackQueryHandler(handle_test_button_callback, pattern="test_button"))
    application.add_handler(CallbackQueryHandler(handle_status_callback, pattern="status"))
    application.add_handler(CallbackQueryHandler(handle_back_to_main_callback, pattern="back_to_main"))
    application.add_error_handler(error_handler)

    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
    print("   ‚Ä¢ /start - –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç")
    print("   ‚Ä¢ pay - –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã")
    print("   ‚Ä¢ check_payment - –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("   ‚Ä¢ test_button - —Ç–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞")
    print("   ‚Ä¢ status - –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç—É—Å–∞")
    print("   ‚Ä¢ back_to_main - –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥")
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ inline –∫–Ω–æ–ø–∫–∏ –≤ –±–æ—Ç–µ")
    print("üìù –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è")
    
    application.run_polling()

if __name__ == '__main__':
    main()
