#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ inline –∫–Ω–æ–ø–æ–∫
"""

import asyncio
import logging
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def test_bot_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É"""
    print("ü§ñ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É")
    print("=" * 50)
    
    try:
        bot = Bot(token=config.BOT_TOKEN)
        await bot.initialize()
        
        bot_info = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        print(f"   ‚Ä¢ ID: {bot_info.id}")
        print(f"   ‚Ä¢ –ò–º—è: {bot_info.first_name}")
        print(f"   ‚Ä¢ Username: @{bot_info.username}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
        return False

def test_handlers():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("\nüîß –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    print("=" * 50)
    
    try:
        application = Application.builder().token(config.BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", lambda u, c: None))
        application.add_handler(CallbackQueryHandler(lambda u, c: None, pattern="pay"))
        application.add_handler(CallbackQueryHandler(lambda u, c: None, pattern="check_payment"))
        application.add_handler(CallbackQueryHandler(lambda u, c: None, pattern="test_button"))
        application.add_handler(CallbackQueryHandler(lambda u, c: None, pattern="status"))
        application.add_handler(CallbackQueryHandler(lambda u, c: None, pattern="back_to_main"))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers = application.handlers[0]
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(handlers)}")
        
        for i, handler in enumerate(handlers):
            print(f"   ‚Ä¢ {i+1}. {type(handler).__name__}: {handler.pattern if hasattr(handler, 'pattern') else 'N/A'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return False

def test_inline_keyboard():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    print("\n‚å®Ô∏è –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø (299 —Ä—É–±.)", callback_data="pay")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏", callback_data="test_button")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        print("‚úÖ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
        print(f"   ‚Ä¢ –ö–Ω–æ–ø–æ–∫: {len(keyboard)}")
        print(f"   ‚Ä¢ Callback data: pay, check_payment, test_button, status")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return False

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    try:
        print(f"‚úÖ BOT_TOKEN: {config.BOT_TOKEN[:10]}...")
        print(f"‚úÖ YOOKASSA_SHOP_ID: {config.YOOKASSA_SHOP_ID}")
        print(f"‚úÖ YOOKASSA_SECRET_KEY: {config.YOOKASSA_SECRET_KEY[:10]}...")
        print(f"‚úÖ PRIVATE_CHANNEL_ID: {config.PRIVATE_CHANNEL_ID}")
        print(f"‚úÖ PAYMENT_AMOUNT: {config.PAYMENT_AMOUNT}")
        print(f"‚úÖ PAYMENT_DESCRIPTION: {config.PAYMENT_DESCRIPTION}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def print_troubleshooting():
    """–ü–µ—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–µ–ø–æ–ª–∞–¥–æ–∫"""
    print("\n" + "=" * 50)
    print("üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ –ù–ï–ü–û–õ–ê–î–û–ö")
    print("=" * 50)
    
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω:")
    print("   .venv\\Scripts\\python.exe test_inline_buttons.py")
    
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏:")
    print("   ‚Ä¢ –ò—â–∏—Ç–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print("   ‚Ä¢ BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("   ‚Ä¢ –ë–æ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    print("   ‚Ä¢ –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –¥—Ä—É–≥–∏–º–∏ –±–æ—Ç–∞–º–∏")
    
    print("\n4Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:")
    print("   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ (Ctrl+C)")
    print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: .venv\\Scripts\\python.exe test_inline_buttons.py")
    
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É inline –∫–Ω–æ–ø–æ–∫:")
    print("   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É")
    print("   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ inline –∫–Ω–æ–ø–∫–∏")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ callback_query –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ inline –∫–Ω–æ–ø–æ–∫")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    config_ok = test_config()
    bot_ok = await test_bot_connection()
    handlers_ok = test_handlers()
    keyboard_ok = test_inline_keyboard()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    print(f"   ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'‚úÖ' if config_ok else '‚ùå'}")
    print(f"   ‚Ä¢ –ë–æ—Ç: {'‚úÖ' if bot_ok else '‚ùå'}")
    print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {'‚úÖ' if handlers_ok else '‚ùå'}")
    print(f"   ‚Ä¢ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {'‚úÖ' if keyboard_ok else '‚ùå'}")
    
    if all([config_ok, bot_ok, handlers_ok, keyboard_ok]):
        print("\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        print("–ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç callback_query")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print_troubleshooting()

if __name__ == "__main__":
    asyncio.run(main())
