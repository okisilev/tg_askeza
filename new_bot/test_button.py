#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
"""

import asyncio
import logging
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import config
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = Database()
    db.add_user(
        user_id=user_id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    keyboard = [
        [InlineKeyboardButton(f"üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø ({config.PAYMENT_AMOUNT} —Ä—É–±.)", callback_data="pay")],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or '–¥—Ä—É–≥'}! üå∏

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ {config.PAYMENT_AMOUNT} —Ä—É–±–ª–µ–π.

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –∑–∞–∫—Ä—ã—Ç—ã–º –æ–±—Å—É–∂–¥–µ–Ω–∏—è–º.
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup
    )

async def handle_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    try:
        print(f"üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–∞ –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        await query.edit_message_text(
            "‚úÖ –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
            "–ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –ÆKassa API.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
        )
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "‚úÖ –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –ÆKassa API."
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(config.BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_payment_callback, pattern="pay"))
    application.add_handler(CallbackQueryHandler(check_payment, pattern="check_payment"))
    application.add_error_handler(error_handler)

    print("üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print(f"üí∞ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: {config.PAYMENT_AMOUNT} —Ä—É–±–ª–µ–π")
    print(f"üì∫ –ö–∞–Ω–∞–ª: {config.PRIVATE_CHANNEL_ID}")
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –±–æ—Ç–µ")
    application.run_polling()

if __name__ == '__main__':
    main()
