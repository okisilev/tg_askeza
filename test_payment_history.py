#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
"""

import logging
import sqlite3
from database import Database
from yookassa_client import YooKassaClient
from config import DATABASE_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def test_database_payments():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ –ë–î ===")
    
    try:
        with sqlite3.connect(DATABASE_PATH) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute('''
                SELECT yookassa_payment_id, payment_type, amount, status, created_at, paid_at
                FROM payments 
                ORDER BY created_at DESC
                LIMIT 5
            ''')
            payments = cursor.fetchall()
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(payments)} –ø–ª–∞—Ç–µ–∂–µ–π –≤ –ë–î")
            
            for payment in payments:
                print(f"  - ID: {payment['yookassa_payment_id'][:8]}...")
                print(f"    –¢–∏–ø: {payment['payment_type']}")
                print(f"    –°—É–º–º–∞: {payment['amount']}‚ÇΩ")
                print(f"    –°—Ç–∞—Ç—É—Å: {payment['status']}")
                print(f"    –°–æ–∑–¥–∞–Ω: {payment['created_at']}")
                print()
            
            return payments
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        return []

def test_payment_status_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("\n=== –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π ===")
    
    try:
        yookassa = YooKassaClient()
        
        # –ü–æ–ª—É—á–∞–µ–º pending –ø–ª–∞—Ç–µ–∂–∏
        with sqlite3.connect(DATABASE_PATH) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute('''
                SELECT yookassa_payment_id FROM payments 
                WHERE status = 'pending'
                LIMIT 3
            ''')
            pending_payments = cursor.fetchall()
        
        if not pending_payments:
            print("‚ÑπÔ∏è –ù–µ—Ç pending –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        
        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {len(pending_payments)} pending –ø–ª–∞—Ç–µ–∂–µ–π...")
        
        for payment in pending_payments:
            payment_id = payment['yookassa_payment_id']
            print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂: {payment_id[:8]}...")
            
            try:
                status_result = yookassa.get_payment_status(payment_id)
                
                if status_result["success"]:
                    status = status_result["status"]
                    print(f"  ‚úÖ –°—Ç–∞—Ç—É—Å: {status}")
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞: {status_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    
            except Exception as e:
                print(f"  ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

def test_payment_history_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("\n=== –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π ===")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
        payments = test_database_payments()
        
        if not payments:
            print("‚ÑπÔ∏è –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        print("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:")
        print("-" * 40)
        
        for payment in payments:
            payment_id = payment['yookassa_payment_id']
            payment_type = payment['payment_type']
            amount = payment['amount']
            status = payment['status']
            created_at = payment['created_at']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
            type_name = "–ê—Å–∫–µ–∑–∞" if payment_type == "askeza" else "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
            status_emoji = {
                'pending': '‚è≥',
                'succeeded': '‚úÖ',
                'canceled': '‚ùå'
            }.get(status, '‚ùì')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            from datetime import datetime
            try:
                created_date = datetime.fromisoformat(created_at.replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
            except:
                created_date = created_at
            
            formatted_text = f"{status_emoji} {type_name} - {amount}‚ÇΩ\n"
            formatted_text += f"   ID: {payment_id[:8]}...\n"
            formatted_text += f"   –î–∞—Ç–∞: {created_date}\n"
            
            print(formatted_text)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ –ë–î
    test_database_payments()
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    test_payment_status_check()
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    test_payment_history_formatting()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:")
    print("1. ‚úÖ –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª –æ–ø–ª–∞—Ç—ã")
    print("2. ‚úÖ –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("3. ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ API –ÆKassa")
    print("4. ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("5. ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å —ç–º–æ–¥–∑–∏ –∏ –¥–∞—Ç–∞–º–∏")

if __name__ == "__main__":
    main()
