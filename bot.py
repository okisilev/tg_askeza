
import logging
import asyncio
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram import Update
from telegram.ext import ContextTypes
from config import BOT_TOKEN, YOOKASSA_SECRET_KEY
from handlers import BotHandlers
from database import Database
from channel_manager import ChannelManager
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AskezaBot:
    def __init__(self):
        self.handlers = BotHandlers()
        self.db = Database()
        self.channel_manager = ChannelManager()
    
    async def debug_callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ callback'–æ–≤"""
        logger.info(f"DEBUG CALLBACK: –ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.callback_query.from_user.id}")
        logger.info(f"DEBUG CALLBACK: –î–∞–Ω–Ω—ã–µ: {update.callback_query.data}")
        # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    
    async def webhook_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç –ÆKassa"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook
            if update.message:
                webhook_data = update.message.text
            else:
                webhook_data = str(update)
            
            # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
            try:
                webhook_json = json.loads(webhook_data)
            except json.JSONDecodeError:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ webhook")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ YooKassa –∫–ª–∏–µ–Ω—Ç
            result = self.handlers.yookassa.process_webhook(webhook_json)
            
            if result["success"] and result.get("status") == "succeeded":
                payment_id = result["payment_id"]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                self.db.update_payment_status(payment_id, "succeeded")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                payment_info = self.db.get_payment(payment_id)
                if payment_info:
                    user_id = payment_info["user_id"]
                    payment_type = payment_info["payment_type"]
                    
                    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
                    self.db.grant_access(user_id, payment_type)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª—ã
                    await self.channel_manager.grant_access_to_user(user_id, payment_type)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    success_text = f"""
‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ {payment_type}.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                    """
                    
                    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                    keyboard = [
                        [InlineKeyboardButton("üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª", callback_data="private_channel")],
                        [InlineKeyboardButton("üí¨ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç", callback_data="private_chat")],
                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=success_text,
                        reply_markup=reply_markup
                    )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
    
    async def cleanup_expired_access(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            expired_users = self.db.get_expired_users()
            revoked_count = self.db.revoke_expired_access()
            
            if revoked_count > 0:
                logger.info(f"–û—Ç–æ–∑–≤–∞–Ω –¥–æ—Å—Ç—É–ø —É {revoked_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
                for user_id in expired_users:
                    try:
                        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
                        await self.channel_manager.revoke_access_from_user(user_id)
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        from telegram import Bot
                        bot = Bot(token=BOT_TOKEN)
                        await bot.send_message(
                            chat_id=user_id,
                            text="‚è∞ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ê—Å–∫–µ–∑—ã –∏—Å—Ç–µ–∫. –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –±–æ—Ç—É."
                        )
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–µ–∫—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {e}")
    
    async def periodic_cleanup(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        while True:
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            await self.cleanup_expired_access()
    
    def start_cleanup_task(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        import threading
        import time
        
        def cleanup_worker():
            while True:
                time.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.cleanup_expired_access())
                loop.close()
        
        cleanup_thread = threading.Thread(target=cleanup_worker, daemon=True)
        cleanup_thread.start()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        if not YOOKASSA_SECRET_KEY or YOOKASSA_SECRET_KEY.startswith('test_YOUR_'):
            logger.warning("YOOKASSA_SECRET_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
            logger.warning("–°–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ YOOKASSA_SETUP.md")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.handlers.start_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handlers.handle_message))
        self.application.add_handler(CallbackQueryHandler(self.handlers.button_callback))
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
        logger.info("- CommandHandler –¥–ª—è /start")
        logger.info("- MessageHandler –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        logger.info("- CallbackQueryHandler –¥–ª—è –∫–Ω–æ–ø–æ–∫")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è webhook –æ—Ç –ÆKassa (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è) - –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        # self.application.add_handler(
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, self.webhook_handler)
        # )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.handlers.error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        # self.start_cleanup_task()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.application.run_polling()

if __name__ == "__main__":
    bot = AskezaBot()
    bot.run()
