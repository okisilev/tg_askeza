#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
"""

import asyncio
import logging
from datetime import datetime
from database import Database
from channel_manager import ChannelManager
from yookassa_client import YooKassaClient
from config import BOT_TOKEN, PRIVATE_CHANNEL_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def test_payment_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("üß™ –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        db = Database()
        channel_manager = ChannelManager()
        yookassa_client = YooKassaClient()
        
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending –ø–ª–∞—Ç–µ–∂–∏
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, yookassa_payment_id, payment_type, amount, created_at 
                FROM payments 
                WHERE status = 'pending'
                ORDER BY created_at DESC
            ''')
            pending_payments = cursor.fetchall()
        
        if pending_payments:
            print(f"‚è≥ –ù–∞–π–¥–µ–Ω–æ {len(pending_payments)} pending –ø–ª–∞—Ç–µ–∂–µ–π:")
            for payment in pending_payments:
                print(f"   ‚Ä¢ User: {payment[0]}")
                print(f"     Payment ID: {payment[1]}")
                print(f"     Type: {payment[2]}")
                print(f"     Amount: {payment[3]}‚ÇΩ")
                print(f"     Created: {payment[4]}")
                print()
        else:
            print("‚úÖ Pending –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT p.user_id, p.yookassa_payment_id, p.payment_type, p.amount, p.created_at
                FROM payments p
                LEFT JOIN user_access ua ON p.user_id = ua.user_id AND ua.is_active = 1
                WHERE p.status = 'succeeded' AND ua.user_id IS NULL
                ORDER BY p.created_at DESC
            ''')
            payments_without_access = cursor.fetchall()
        
        if payments_without_access:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(payments_without_access)} —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞:")
            for payment in payments_without_access:
                print(f"   ‚Ä¢ User: {payment[0]}")
                print(f"     Payment ID: {payment[1]}")
                print(f"     Type: {payment[2]}")
                print(f"     Amount: {payment[3]}‚ÇΩ")
                print(f"     Created: {payment[4]}")
                print()
        else:
            print("‚úÖ –í—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø")
        
        return len(pending_payments), len(payments_without_access)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return 0, 0

async def test_notification_sending():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\nüìß –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("=" * 50)
    
    try:
        from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
        
        bot = Bot(token=BOT_TOKEN)
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_text = """
üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
        keyboard = [
            [InlineKeyboardButton("üì∫ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª", callback_data="private_channel")],
            [InlineKeyboardButton("üí¨ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç", callback_data="private_chat")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        # await bot.send_message(
        #     chat_id=760111270,  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        #     text=test_text,
        #     reply_markup=reply_markup
        # )
        
        print("‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω")
        print("(–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False

def print_recommendations():
    """–ü–µ—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    print("\n" + "=" * 50)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 50)
    
    print("\n1Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print("   python run_no_webhook.py")
    
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏:")
    print("   ‚Ä¢ –ò—â–∏—Ç–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    print("\n3Ô∏è‚É£ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é:")
    print("   python fix_all_payments.py")
    
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print("   ‚Ä¢ BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    print("   ‚Ä¢ PRIVATE_CHANNEL_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    print("   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
    pending_count, without_access_count = await test_payment_processing()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_ok = await test_notification_sending()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚Ä¢ Pending –ø–ª–∞—Ç–µ–∂–µ–π: {pending_count}")
    print(f"   ‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞: {without_access_count}")
    print(f"   ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if notification_ok else '‚ùå'}")
    
    if without_access_count > 0:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞!")
        print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python run_no_webhook.py")
        print("2. –ò–ª–∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é: python fix_all_payments.py")
    else:
        print("\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print_recommendations()

if __name__ == "__main__":
    asyncio.run(main())
